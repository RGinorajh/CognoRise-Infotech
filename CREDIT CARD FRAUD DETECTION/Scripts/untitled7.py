# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZi7ddBV0bkDPyRQIZU_5iPT7a0rjY2a
"""

#Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix, classification_report
from imblearn.over_sampling import SMOTE
import seaborn as sns
import matplotlib.pyplot as plt
import joblib

# Load the dataset
data = pd.read_csv('creditcard.csv')

# Data Overview
print(data.info())
print(data.describe())
print(data.isnull().sum())  # Checking for missing values

data = data.dropna(subset=['Class'])

# Splitting features and labels
X = data.drop(columns=['Class'])
y = data['Class']

# Normalization of the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Handling class imbalance using SMOTE (Oversampling the minority class)
smote = SMOTE(sampling_strategy='minority')
X_resampled, y_resampled = smote.fit_resample(X_scaled, y)

# Splitting the data into training and testing subsets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)

# Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluate the model (Precision, Recall, F1-Score)
print("Random Forest:")
print(classification_report(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))

# Confusion Matrix for Random Forest
plt.figure(figsize=(7,5))
sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix - Random Forest')
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.show()

# Precision-Recall and F1-score display
precision = precision_score(y_test, y_pred_rf)
recall = recall_score(y_test, y_pred_rf)
f1 = f1_score(y_test, y_pred_rf)

print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-Score: {f1:.4f}")

# Example of a new transaction with 30 features
new_transaction = [[34567, -2.312226, 1.951993, -1.391657, -1.150297, -2.254491, -0.199037, -0.261178, -0.430682, 1.204001,
                    0.542278, -0.073305, -0.073529, -0.204970, 1.031134, 0.465211, -0.094567, -2.334213, 0.515320,
                    -0.936233, -0.241626, 0.486180, 0.374807, -0.007318, -0.001897, 0.001778, 0.000383, -0.000040,
                    0.000074, 1500]]  # 30 features
# Preprocess the input using the same scaler (with the correct feature count)
new_transaction_scaled = scaler.transform(new_transaction)

# Make a prediction using the trained Random Forest model
prediction = rf_model.predict(new_transaction_scaled)

# Output the result
if prediction == 1:
    print("Prediction: Fraudulent transaction")
else:
    print("Prediction: Legitimate transaction")